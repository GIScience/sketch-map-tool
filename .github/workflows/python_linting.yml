name: Python-Linting

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8"]
        poetry-version: ["1.2"]
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v3
      # Setup Python and Poetry (Source Poetry GitHub Repository)
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get full Python version
        id: full-python-version
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

      - name: Bootstrap poetry
        run: |
          curl -sL https://install.python-poetry.org | python - -y

      - name: Update PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Set up cache
        uses: actions/cache@v3
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: timeout 10s poetry run pip --version || rm -rf .venv

      - name: Install dependencies
        run: |
          poetry install
      # Analyse code
      - name: Analysing the code with pylint, flake8 and bandit
        run: |
          poetry run pylint $(git ls-files '*.py')
          poetry run flake8 $(git ls-files '*.py')
          poetry run bandit $(git ls-files '*.py')

      - name: Static type checking with mypy
        run: |
          poetry run mypy --strict $(git ls-files '*.py')
