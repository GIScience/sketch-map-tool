#!/usr/bin/env python

from subprocess import PIPE, Popen  # nosec
from typing import List, Type

from pre_commit_stages.stage_base import Stage
from pre_commit_stages.stage_eslint import ESLint
from pre_commit_stages.stage_htmlhint import HTMLHint
from pre_commit_stages.stage_mypy import Mypy
from pre_commit_stages.stage_pylint import Pylint
from pre_commit_stages.stage_stylelint import StyleLint

# TODO: Uncomment the ones you want to activate:
STAGES: List[Type[Stage]] = [
    # ---------- Python ----------
    Pylint,
    Mypy,
    # ---------- JavaScript ----------
    ESLint,
    # ---------- HTML ----------
    HTMLHint,
    # ---------- CSS ----------
    StyleLint,
]


def get_changed_files_in_commit() -> List[str]:
    """
    Get a list of all files that contain staged changes for the current commit

    :return: List of changed files
    """
    process_git_diff = Popen(['git', 'diff', '--cached', '--name-only'], stdout=PIPE, stderr=PIPE)
    stdout, stderr = process_git_diff.communicate()
    stdout = stdout.decode("utf8")
    stderr = stderr.decode("utf8")
    if stderr != "":
        raise Exception(f"Could not get files changed in commit: '{stderr}'")
    changed_files = [file_path.strip() for file_path in stdout.strip().split("\n")]
    return changed_files


if __name__ == "__main__":
    changed_files = get_changed_files_in_commit()
    print(f"Detected staged changes in following files: {changed_files}")
    for stage in STAGES:
        print(20*"_")
        print(f"Running Stage {stage}")
        current_stage = stage(changed_files)
